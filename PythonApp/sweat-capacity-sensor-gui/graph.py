"""=================================================================
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
====================================================================
"""

__author__ = "Jong Yoon Lee"
__license__ = "Apache"
__version__ = "0.1.0"
__email__ = "jongyoon.lee@sibelhealth.com"

import pyqtgraph as pg
pg.setConfigOption('background', 'w')
import numpy as np
from threading  import Lock
import logging

class Graph(object):

    def __init__(self,parent, name,color, viewrange, metric=False, range = [0,0], showyaxis = False):
        self.graphobject = pg.PlotWidget(parent)
        self.graphobject.setXRange(0, viewrange, 0)
        self.graphobject.hideButtons()
        self.graphobject.addLegend()
        self.graphobject.setLabel('left', 'Capacity (pF)')
        self.graphobject.setLabel('bottom', 'Time')  		

#        self.curve = (self.graphobject.plot(pen=color, connect="finite"))

        self.channel1_curve = (self.graphobject.plot(pen=color, name='Channel 1', connect="finite"))
        self.channel2_curve = (self.graphobject.plot(pen='b', name='Channel 2', connect="finite"))

        self.channel1_buffer = np.empty(viewrange)
        self.channel1_buffer.fill(np.nan)
        self.channel1_buffer[0] = 0

        self.channel2_buffer = np.empty(viewrange)
        self.channel2_buffer.fill(np.nan)
        self.channel2_buffer[0] = 0
		
        self.range = viewrange
        self.cur_pos = 0
		
        self.space_len = self.range/20

    def getGraph(self):
        """ returns the graph object generated by the class"""
        return self.graphobject

    def getData(self):
        """get the data used for graphing"""
        buffer = (self.channel1_buffer, self.channel2_buffer)
        return buffer
		
    def updateGraph(self):	
        self.channel1_curve.setData(self.channel1_buffer)
        self.channel2_curve.setData(self.channel2_buffer)
		
    def updateData(self, data, data_len):

        for i in range(data_len/2):
            new_insert_pos = (self.cur_pos + i)
            if new_insert_pos >= self.range:
                break
            # self.buffer[new_insert_pos] = data[i]
            self.channel1_buffer[new_insert_pos] = data[2*i]
            self.channel2_buffer[new_insert_pos] = data[2*i+1]
			
        new_insert_pos += 1

        for i in range(self.space_len):
            if new_insert_pos + i >= self.range:
                break
            self.channel1_buffer[(new_insert_pos + i)] = np.nan
            self.channel2_buffer[(new_insert_pos + i)] = np.nan			
    
        self.cur_pos = new_insert_pos 

    def clear_graph(self):
        self.channel1_buffer = np.empty(self.range)
        self.channel2_buffer = np.empty(self.range)		
        self.channel1_buffer.fill(np.nan)
        self.channel2_buffer.fill(np.nan) 		
        self.graphobject.setXRange(0, self.range,0)
        self.cur_pos = 0
        logging.debug("graph cleared")
